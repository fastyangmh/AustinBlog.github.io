I"*1<h1 id="abstract">Abstract</h1>
<p>Hello everyone, my name is Austin.</p>

<p>Today I want to introduce one of the NLP data augmentation methods named random synonym replacement.</p>

<p>In human conversation or writing, we use different words to represent the same thing.<br />
<img src="/assets/images/deep_learning/2021-05-29-Data_Augmentation_in_NLP_Random_Synonym_Replacement_image1.png" alt="synonym example" /></p>

<p>Therefore, this method is to use different words to express the same thing when simulating human daily conversation or writing.</p>

<p>In this method, the key point is to use the synonym to replace the random select word to prevent the neural network overfitting.</p>

<p>Ok! Letâ€™s code it.</p>

<h1 id="step">Step</h1>
<p>There are 3 steps in this method.</p>

<p>In the first step, we need to randomly select a word and set a threshold about the similarity to prevent the synonym from mismatching.</p>

<p>In the second step, according to the word, we can find out the top 10 similar synonyms and use the threshold to remove the similar synonyms below the threshold.</p>

<p>In the third step, randomly select the synonym from the previous result to replace the source word.</p>

<h1 id="requirement">Requirement</h1>
<p>Please install packages by the following list.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pip</span> <span class="n">install</span> <span class="o">--</span><span class="n">upgrade</span> <span class="n">gensim</span> <span class="n">numpy</span>
</code></pre></div></div>

<h1 id="code">Code</h1>

<h2 id="import">import</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#import
</span><span class="kn">from</span> <span class="nn">gensim.models.word2vec</span> <span class="kn">import</span> <span class="n">Word2Vec</span>
<span class="kn">import</span> <span class="nn">gensim.downloader</span> <span class="k">as</span> <span class="n">api</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">random</span>
<span class="kn">import</span> <span class="nn">string</span>
</code></pre></div></div>

<h2 id="class">class</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># class
</span>

<span class="k">class</span> <span class="nc">RandomSynonymReplacement</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">corpus</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">similarity_threshold</span><span class="p">:</span> <span class="nb">float</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="n">Word2Vec</span><span class="p">(</span><span class="n">api</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">corpus</span><span class="p">))</span>  <span class="c1"># create the model of Word2Vec
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">similarity_threshold</span> <span class="o">=</span> <span class="n">similarity_threshold</span>    <span class="c1"># set the threshold
</span>
    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="c1"># Split the input text with spaces to get each word
</span>        <span class="c1"># and check if the last character is a punctuation mark
</span>        <span class="k">if</span> <span class="n">text</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="ow">in</span> <span class="n">string</span><span class="p">.</span><span class="n">punctuation</span><span class="p">:</span>
            <span class="n">words</span> <span class="o">=</span> <span class="n">text</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="s">' '</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">words</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">' '</span><span class="p">)</span>

        <span class="c1"># randomly select a word and replace it with a synonym
</span>        <span class="k">for</span> <span class="n">word_index</span> <span class="ow">in</span> <span class="n">random</span><span class="p">.</span><span class="n">sample</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">words</span><span class="p">)),</span> <span class="nb">len</span><span class="p">(</span><span class="n">words</span><span class="p">)):</span>
            <span class="n">word</span> <span class="o">=</span> <span class="n">words</span><span class="p">[</span><span class="n">word_index</span><span class="p">]</span>
            <span class="c1"># turn the selected word to lower case
</span>            <span class="c1"># and check it whether exist in the vocabulary of the Word2Vec model
</span>            <span class="k">if</span> <span class="n">word</span><span class="p">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">wv</span><span class="p">.</span><span class="n">key_to_index</span><span class="p">:</span>
                <span class="c1"># get similarity word by the model of Word2Vec
</span>                <span class="c1"># and put it to numpy array
</span>                <span class="n">similarity_word</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span>
                    <span class="bp">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">wv</span><span class="p">.</span><span class="n">most_similar</span><span class="p">(</span><span class="n">word</span><span class="p">.</span><span class="n">lower</span><span class="p">()))</span>
                <span class="c1"># get the similarity from similarity_word
</span>                <span class="n">similarity</span> <span class="o">=</span> <span class="n">similarity_word</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">].</span><span class="n">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nb">float</span><span class="p">)</span>
                <span class="c1"># get the index with similarity above the threshold
</span>                <span class="n">similarity_index</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">where</span><span class="p">(</span>
                    <span class="n">similarity</span> <span class="o">&gt;=</span> <span class="bp">self</span><span class="p">.</span><span class="n">similarity_threshold</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
                <span class="c1"># check the length of similarity_index
</span>                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">similarity_index</span><span class="p">):</span>
                    <span class="c1"># randomly select the synonym
</span>                    <span class="n">words</span><span class="p">[</span><span class="n">words</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">word</span><span class="p">)]</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">sample</span><span class="p">(</span>
                        <span class="nb">list</span><span class="p">(</span><span class="n">similarity_word</span><span class="p">[</span><span class="n">similarity_index</span><span class="p">,</span> <span class="mi">0</span><span class="p">]),</span> <span class="mi">1</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
                    <span class="c1"># check if the last character is a punctuation mark
</span>                    <span class="k">if</span> <span class="n">text</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="ow">in</span> <span class="n">string</span><span class="p">.</span><span class="n">punctuation</span><span class="p">:</span>
                        <span class="k">return</span> <span class="s">' '</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">words</span><span class="p">)</span><span class="o">+</span><span class="n">text</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="k">return</span> <span class="s">' '</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">text</span>
</code></pre></div></div>

<h2 id="call">call</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="c1"># create a class of RandomSynonymReplacement
</span>    <span class="n">random_synonym_replacement</span> <span class="o">=</span> <span class="n">RandomSynonymReplacement</span><span class="p">(</span>
        <span class="n">corpus</span><span class="o">=</span><span class="s">'text8'</span><span class="p">,</span> <span class="n">similarity_threshold</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>

    <span class="c1"># define a string
</span>    <span class="n">text</span> <span class="o">=</span> <span class="s">'Hello, World!'</span>

    <span class="c1"># check the result
</span>    <span class="k">print</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">random_synonym_replacement</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="result">result</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Hello</span><span class="p">,</span> <span class="n">World</span><span class="err">!</span>
<span class="n">Hello</span><span class="p">,</span> <span class="n">europe</span><span class="err">!</span>
</code></pre></div></div>

<h2 id="full-version">full version</h2>
<p>The full version of code is here: <a href="https://github.com/fastyangmh/toolkit/blob/main/Python/RandomSynonymReplacement.py">https://github.com/fastyangmh/toolkit/blob/main/Python/RandomSynonymReplacement.py</a></p>

<h1 id="conclusion">Conclusion</h1>
<p>If you have any questions, please feel free to contact me by email.</p>

<h1 id="reference">Reference</h1>
<p><a href="https://radimrehurek.com/gensim/intro.html">What is Gensim?</a><br />
<a href="https://numpy.org/">NumPy</a><br />
<a href="https://maelfabien.github.io/machinelearning/NLP_8/#when-should-we-use-data-augmentation">Data Augmentation in Natural Language Processing</a><br />
<a href="https://marssu.coderbridge.io/2020/10/26/nlp-data-augmenatation-%E5%B8%B8%E8%A6%8B%E6%96%B9%E6%B3%95/">NLP Data Augmentation å¸¸è¦‹æ–¹æ³•</a></p>
:ET